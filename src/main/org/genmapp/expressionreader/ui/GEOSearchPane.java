/*
 Copyright 2010 Alexander Pico
 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 	
 	http://www.apache.org/licenses/LICENSE-2.0 
 	
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License. 
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GEOSearchDialog.java
 *
 * Created on Jul 1, 2010, 5:29:56 PM
 */

package org.genmapp.expressionreader.ui;

import org.genmapp.expressionreader.geo.ui.SOFTViewer;
import cytoscape.Cytoscape;
import cytoscape.task.Task;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import gov.nih.nlm.ncbi.soap.eutils.esearch.ESearchRequest;
import gov.nih.nlm.ncbi.soap.eutils.esummary.DocSumType;
import gov.nih.nlm.ncbi.soap.eutils.esummary.ItemType;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.genmapp.expressionreader.geo.data.SOFT;
import org.genmapp.expressionreader.tasks.GEOSearchTask;
import org.genmapp.expressionreader.tasks.SOFTDownloadTask;

/**
 *
 * @author djiao
 */
public class GEOSearchPane extends javax.swing.JPanel implements SearchResultViewer {

    private int page = 0;
    private int itemPerPage = 20;
    private String term = "";

    private SOFTViewer softViewer = null;

    /** Creates new form GEOSearchDialog */
    public GEOSearchPane() {
        super();
        initComponents();

        double[] percent = new double[] {0.1, 0.2, 0.25, 0.2, 0.1, 0.2};
        for (int i = 0; i < resultTable.getColumnCount(); i++) {
            TableColumn column = resultTable.getColumnModel().getColumn(i);
            column.setPreferredWidth((int) (1200 * percent[i]));
            column.setResizable(true);
        } 

    }

    public GEOSearchPane(SOFTViewer viewer) {
        this();
        this.softViewer = viewer;
    }

    public void setSoftViewer(SOFTViewer viewer) {
        this.softViewer = viewer;
    }

    public void search(String query) {
        this.searchFld.setText(query);
        this.searchBtnActionPerformed(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPane = new javax.swing.JPanel();
        searchFld = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        bottomPane = new javax.swing.JPanel();
        viewBtn = new javax.swing.JButton();
        resultPane = new javax.swing.JPanel();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        resultControlPane = new javax.swing.JPanel();
        prevBtn = new javax.swing.JButton();
        pageLbl = new javax.swing.JLabel();
        pageField = new javax.swing.JTextField();
        totalLbl = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        statusPane = new javax.swing.JPanel();
        statusLbl = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout(2, 2));

        searchPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Search Term"));
        searchPane.setLayout(new java.awt.BorderLayout(2, 2));

        searchFld.setMinimumSize(new java.awt.Dimension(150, 27));
        searchFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFldActionPerformed(evt);
            }
        });
        searchPane.add(searchFld, java.awt.BorderLayout.CENTER);

        searchBtn.setText("Search!");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        searchPane.add(searchBtn, java.awt.BorderLayout.LINE_END);

        add(searchPane, java.awt.BorderLayout.PAGE_START);

        viewBtn.setText(" View ");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        bottomPane.add(viewBtn);

        add(bottomPane, java.awt.BorderLayout.PAGE_END);

        resultPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        resultPane.setLayout(new java.awt.BorderLayout());

        resultScrollPane.setPreferredSize(new java.awt.Dimension(452, 202));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Summary", "Platform", "Species", "Samples"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultTable.setRowHeight(22);
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        resultScrollPane.setViewportView(resultTable);

        resultPane.add(resultScrollPane, java.awt.BorderLayout.CENTER);

        prevBtn.setText(" << ");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });
        resultControlPane.add(prevBtn);

        pageLbl.setText("Page");
        resultControlPane.add(pageLbl);

        pageField.setText("0");
        pageField.setMinimumSize(new java.awt.Dimension(50, 27));
        pageField.setPreferredSize(new java.awt.Dimension(50, 27));
        pageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageFieldActionPerformed(evt);
            }
        });
        resultControlPane.add(pageField);

        totalLbl.setText("of ");
        resultControlPane.add(totalLbl);

        nextBtn.setText(" >> ");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        resultControlPane.add(nextBtn);

        resultPane.add(resultControlPane, java.awt.BorderLayout.PAGE_START);

        statusPane.setLayout(new java.awt.BorderLayout());

        statusLbl.setText("  ");
        statusPane.add(statusLbl, java.awt.BorderLayout.EAST);

        resultPane.add(statusPane, java.awt.BorderLayout.PAGE_END);

        add(resultPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        if (("").equals(searchFld.getText())) {
            return;
        }

        if (!this.term.equals(searchFld.getText())) { //  new search
            this.term = searchFld.getText();
            this.page = 0;
        }

        ESearchRequest request = new ESearchRequest();
        request.setDb("gds");
        request.setRetMax(String.valueOf(this.itemPerPage));
        request.setRetStart(String.valueOf(this.page*this.itemPerPage));
        request.setTerm(searchFld.getText());

        final ESearchRequest query = request;

        Task task = new GEOSearchTask(query, this);
        JTaskConfig config = new JTaskConfig();
        config.setModal(false);
        config.setOwner(Cytoscape.getDesktop());
        config.setAutoDispose(true);
        TaskManager.executeTask(task, config);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        this.page++;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_nextBtnActionPerformed

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        this.page--;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_prevBtnActionPerformed

    private void pageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageFieldActionPerformed
        this.page = Integer.parseInt(this.pageField.getText())-1;
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_pageFieldActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int row = resultTable.getSelectedRow();
        if (row >= 0) {
            Object value = resultTable.getModel().getValueAt(row, 0);
            if (value != null && !"".equals(value)) {
            // Download file
            SOFTDownloadTask task = new SOFTDownloadTask(new String[]{(String)value}, softViewer, SOFT.Format.quick);
            JTaskConfig config = task.getDefaultTaskConfig();

            TaskManager.executeTask(task, config);
        }
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void searchFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFldActionPerformed
        this.searchBtnActionPerformed(evt);
    }//GEN-LAST:event_searchFldActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        if (evt.getClickCount() == 2) {
            viewBtnActionPerformed(null);
        }
}//GEN-LAST:event_resultTableMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialog dialog = new JDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setContentPane(new GEOSearchPane(null));
                dialog.setSize(600, 800);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField pageField;
    private javax.swing.JLabel pageLbl;
    private javax.swing.JButton prevBtn;
    private javax.swing.JPanel resultControlPane;
    private javax.swing.JPanel resultPane;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchFld;
    private javax.swing.JPanel searchPane;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JPanel statusPane;
    private javax.swing.JLabel totalLbl;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    public void viewResults(int total, final List<DocSumType> list) {
        pageField.setText(String.valueOf(page + 1));
        int totalPages = total % itemPerPage == 0 ? total / itemPerPage : (total / itemPerPage + 1);
        totalLbl.setText("Of " + totalPages);

        String status = String.format("Viewing results %d to %d of %d", page*itemPerPage+1, 
                ((page+1)*itemPerPage>total)? total : (page+1)*itemPerPage, total);
        statusLbl.setText(status);

        prevBtn.setEnabled(page != 0);
        nextBtn.setEnabled((page + 1) != totalPages);

        DefaultTableModel model = (DefaultTableModel)resultTable.getModel();
        model.getDataVector().removeAllElements();

        String[] row = null;
        for (DocSumType docsum : list) {
            row = new String[6];
            List<ItemType> items = docsum.getItem();

            ItemType item = items.get(8);
            String entryType = item.getItemContent();
            if ("GDS".equals(entryType)) {
                item = items.get(0);
            } else if ("GSE".equals(entryType)) {
                item = items.get(4);
            } else if ("GPL".equals(entryType)) {
                item = items.get(3);
            }
            row[0] = entryType + item.getItemContent();

            row[1] = items.get(1).getItemContent();     // title
            row[2] = items.get(2).getItemContent();     // summary
            row[3] = items.get(20).getItemContent();    // platform
            row[4] = items.get(5).getItemContent();     // species
            row[5] = items.get(6).getItemContent();     // GSM

            model.addRow(row);
        }
    }
}
