/*
 Copyright 2010 Alexander Pico
 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 	
 	http://www.apache.org/licenses/LICENSE-2.0 
 	
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License. 
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GDSViewerDialog.java
 *
 * Created on Jul 2, 2010, 2:22:37 PM
 */

package org.genmapp.expressionreader.geo.ui;

import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import org.genmapp.expressionreader.geo.GEOQuery;
import org.genmapp.expressionreader.geo.data.GDS;
import org.genmapp.expressionreader.geo.data.SOFT;

/**
 *
 * @author djiao
 */
public class GDSViewerDialog extends javax.swing.JDialog {

    private GDS gds;

    /** Creates new form GDSViewerDialog */
    public GDSViewerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        softViewerPane = new org.genmapp.expressionreader.geo.ui.SOFTViewerPane();
        subsetTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSplitPane1.setLeftComponent(softViewerPane);

        subsetTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Subsets"));
        subsetTabbedPane.setMinimumSize(new java.awt.Dimension(320, 420));
        subsetTabbedPane.setPreferredSize(new java.awt.Dimension(420, 420));
        jSplitPane1.setRightComponent(subsetTabbedPane);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws Exception {
        final SOFT soft = GEOQuery.getGDS("GDS507");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GDSViewerDialog dialog = new GDSViewerDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setSOFT(soft);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private org.genmapp.expressionreader.geo.ui.SOFTViewerPane softViewerPane;
    private javax.swing.JTabbedPane subsetTabbedPane;
    // End of variables declaration//GEN-END:variables

    public void setSOFT(SOFT soft) {
        if (soft.getType() == SOFT.Type.GDS) {
            this.gds = (GDS)soft;
            this.softViewerPane.addPropertyChangeListener(new PropertyChangeListener() {

                public void propertyChange(PropertyChangeEvent pce) {
                    if (pce.getPropertyName().equals("SOFTViewer_ViewStatus")) {
                        if (pce.getNewValue() instanceof Integer) {
                            if ((Integer) pce.getNewValue() == WindowEvent.WINDOW_CLOSING) {
                                dispose();
                            }
                        }
                    }
                }
            });
            this.softViewerPane.setSoft(soft);

            this.setTitle(soft.getId());

            List<SOFT> subsets = gds.getSubsets();
            for (SOFT subset : subsets) {
                GDSSubsetViewerPane pane = new GDSSubsetViewerPane();
                pane.setSOFT(subset, soft.getDataTables().getFirst().getHeaders());
                this.subsetTabbedPane.add(pane, subset.getId());
            }
        } else {
            throw new RuntimeException("Wrong SOFT type");
        }
    }
}
