/*
 Copyright 2010 Alexander Pico
 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 
 	
 	http://www.apache.org/licenses/LICENSE-2.0 
 	
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License. 
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GDSGroupViewerPane.java
 *
 * Created on Jul 7, 2010, 11:07:09 PM
 */

package org.genmapp.expressionreader.geo.ui;

import cytoscape.Cytoscape;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.table.AbstractTableModel;
import org.genmapp.expressionreader.actions.GEOImportAction;
import org.genmapp.expressionreader.geo.GEOQuery;
import org.genmapp.expressionreader.geo.data.GDS;
import org.genmapp.expressionreader.geo.data.SOFT;
import org.genmapp.expressionreader.tasks.SOFTDownloadTask;
import org.genmapp.expressionreader.ui.GSMImportDialog;

/**
 *
 * @author djiao
 */
public class GDSSubsetViewerPane extends javax.swing.JPanel implements SOFTViewer {

    /** Creates new form GDSGroupViewerPane */
    public GDSSubsetViewerPane() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        sampleTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        viewSampleBtn = new javax.swing.JButton();
        importBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        descField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        typeField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        sampleTable = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(192, 250));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        sampleTabbedPane.setMinimumSize(new java.awt.Dimension(12, 320));
        sampleTabbedPane.setPreferredSize(new java.awt.Dimension(12, 320));
        jSplitPane1.setRightComponent(sampleTabbedPane);

        jPanel1.setMinimumSize(new java.awt.Dimension(192, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(452, 278));
        jPanel1.setLayout(new java.awt.BorderLayout());

        viewSampleBtn.setText("  View  ");
        viewSampleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSampleBtnActionPerformed(evt);
            }
        });
        jPanel2.add(viewSampleBtn);

        importBtn.setText(" Import ");
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });
        jPanel2.add(importBtn);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jLabel3.setText("ID:");
        jPanel3.add(jLabel3);

        idField.setEditable(false);
        jPanel3.add(idField);

        jLabel1.setText("Description:");
        jPanel3.add(jLabel1);

        descField.setEditable(false);
        jPanel3.add(descField);

        jLabel2.setText("Type:");
        jPanel3.add(jLabel2);

        typeField.setEditable(false);
        jPanel3.add(typeField);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 252));

        sampleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sampleTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sampleTable);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(jPanel1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void viewSampleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSampleBtnActionPerformed
        int[] rows = sampleTable.getSelectedRows();
        for (int row : rows) {
            String gsmId = (String) sampleTable.getModel().getValueAt(row, 0);
            int index = sampleTabbedPane.indexOfTab(gsmId);
            if (index < 0) { // create a new tab and add to it
                SOFTDownloadTask task = new SOFTDownloadTask(new String[]{gsmId}, this, SOFT.Format.quick);
                JTaskConfig config = task.getDefaultTaskConfig();
                boolean success = TaskManager.executeTask(task, config);
            } else { // bring the tab into focus
                sampleTabbedPane.setSelectedIndex(index);
            }
        }
    }//GEN-LAST:event_viewSampleBtnActionPerformed

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        int[] rows = sampleTable.getSelectedRows();
        String[] ids = new String[rows.length];
        for (int i = 0; i < rows.length; i++) {
            ids[i] = (String)sampleTable.getModel().getValueAt(rows[i], 0);
        }
        if (ids.length > 0) {
            SOFTDownloadTask task = new SOFTDownloadTask(ids, new SOFTViewer() {

                public void viewSOFT(List<SOFT> list) {
                    GEOImportAction.viewSample(list);
                }

            }, SOFT.Format.full);
            TaskManager.executeTask(task, task.getDefaultTaskConfig());
        }
    }//GEN-LAST:event_importBtnActionPerformed

    private void sampleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleTableMouseClicked
        if (evt.getClickCount() == 2) {
            this.viewSampleBtnActionPerformed(null);
        }
    }//GEN-LAST:event_sampleTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField descField;
    private javax.swing.JTextField idField;
    private javax.swing.JButton importBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane sampleTabbedPane;
    private javax.swing.JTable sampleTable;
    private javax.swing.JTextField typeField;
    private javax.swing.JButton viewSampleBtn;
    // End of variables declaration//GEN-END:variables

    public void setSOFT(final SOFT soft, final Map<String, String> header) {
        if (!"SUBSET".equals(soft.getTypeStr()))
            return;

        Map<String, Object> fields = soft.getFields();
        this.idField.setText((String)fields.get("subset_dataset_id"));
        this.descField.setText((String)fields.get("subset_description"));
        this.typeField.setText((String)fields.get("subset_type"));
        
        final String[] list = ((String)fields.get("subset_sample_id")).split(",");
        AbstractTableModel model = new AbstractTableModel() {
            @Override
            public String getColumnName(int i) {
                switch (i) {
                    case 0:
                        return "ID";
                    case 1:
                        return "Title";
                    case 2:
                        return "Source";
                    default:
                        return "";
                }
            }

            public int getRowCount() {
                return list.length;
            }
            public int getColumnCount() {
                return 3;
            }
            public Object getValueAt(int i, int i1) {
                if (i1 == 0) {
                    return list[i];
                } else {
                    String[] desc = header.get(list[i]).split(";");
                    if (i1 == 1) {
                        String[] str = desc[0].split(":");
                        return str[1];
                    } else {
                        String[] str = desc[1].split(":");
                        return str[1];         
                    }
                }
            }
        };

        this.sampleTable.setModel(model);
    }

    public void viewSOFT(List<SOFT> list) {
        for (SOFT soft: list) {
            SOFTViewerPane pane = new SOFTViewerPane();
            pane.addPropertyChangeListener(new PropertyChangeListener() {

                public void propertyChange(PropertyChangeEvent pce) {
                    if (pce.getPropertyName().equals("SOFTViewer_ViewStatus")) {
                        if (pce.getNewValue() instanceof Integer) {
                            if ((Integer)pce.getNewValue() == WindowEvent.WINDOW_CLOSING) {
                                sampleTabbedPane.remove((JComponent)pce.getSource());
                            }
                        }
                    }
                }
            });
            pane.setSoft(soft);
            sampleTabbedPane.add(soft.getId(), pane);
            sampleTabbedPane.setSelectedComponent(pane);
        }
    }

    public static void main(String[] args) throws Exception {
        final SOFT soft = GEOQuery.getGDS("GDS36");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialog dialog = new JDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                GDSSubsetViewerPane pane = new GDSSubsetViewerPane();
                dialog.setContentPane(pane);
                GDS gds = (GDS)soft;
                pane.setSOFT(gds.getSubsets().get(0), gds.getDataTables().getFirst().getHeaders());
                dialog.pack();
                dialog.setVisible(true);
            }
        });
    }
}